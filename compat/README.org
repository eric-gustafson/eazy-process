
* /TRIVIAL-SHELL/ compatibility

https://github.com/gwkkwg/trivial-shell.git

Trivial-shell is "A simple Common-Lisp interface to the underlying
Operating System". It runs a shell command in a sequencial manner.
In this compatibility version, the underlying interpreter no longer have to
be a bourne-compatible-shell, e.g., you can use =perl -e 'XXX'= .

Incompatibility: Timeout-related stuff and EXIT are removed.

: trivial-shell:*BOURNE-COMPATIBLE-SHELL* --- *interpreter*
: trivial-shell:GET-ENV-VAR               --- (environments) in the main library
: trivial-shell:SHELL-COMMAND             --- (shell-command ...)
: trivial-shell:*SHELL-SEARCH-PATHS*      --- DEPRECATED. Always searched
: trivial-shell:EXIT                      --- NOTINCLUDED
: trivial-shell:TIMEOUT-ERROR             --- NOTINCLUDED
: trivial-shell:TIMEOUT-ERROR-COMMAND     --- NOTINCLUDED
: trivial-shell:WITH-TIMEOUT              --- NOTINCLUDED

=shell-command= spawns an interpreter like bash, tsch, sh, perl etc.
It returns 3 values, stdout-string, stderr-string, and the return status,
of type =(values string string fixnum)=.  Commands are run synchronously,
i.e., it always waits for the process to finish.

=shell-command= is implemented with =shell=, therefore it runs where the
resource binding established by =with-rlimit= is in effect.

Note that =*bourne-compatible-shell*= is renamed as =*interpreter*= and
deprecated since it no longer requires the underlying shell to be a
bourne-compatible shell, though there is still a symbol-macro for it to
maintain compatibility.

#+BEGIN_SRC lisp
(shell-command "expr 1 + 2 + 3 + 4") ; --> "10\n", "", 0

(shell-command "echo hello >&2") ; --> "", "hello\n", 0

(shell-command "exit 1") ; --> "", "", 1

(let ((*interpreter* "bash -c"))
  (shell-command "echo {1..3}")) ; --> "1 2 3\n", "", 0

(let ((*interpreter* "perl -e"))
 (shell-command "print(1+3)"))   ; --> "4", "", 0
#+END_SRC

=shell-command= takes =:input= keyword argument, which can be either a
string or a stream. Eazy-process handles it correctly.

* /INFERIOR-SHELL/ Compatibility

INFERIOR-SHELL is basically a sexp -> bash compiler.  I am very
unsatisfacrory on its documentation and how to use it.  (Library with poor
documentation is literally NOTHING.)  Also, I do not like the way
=inferior-shell= fails to build because of the dependency to UIOP and
ASDF3. Yes it fails sometimes.  ASDF is a system building library, how come
inferior-shell should depend on it?

Inferior-shell has the following interace

    run, run/s, run/lines

there could be several possible ways to implement this feature.

1. implement it with direct shell.

   The pros in this is that we can fuly handle the underlying processes,
   and also that the code would be fast.
   
   The cons is the rather bit of ugliness and complexity; it could not be a
   direct 1-to-1 mapping between the shell script and the s-expression.

2. compile the sexp into bash script

   The pros in this is simplicity, and its bug-ridden aspect. (or at least, we
   can rely on everythin bash supports, including exporting,aliasing, etc.)
   
   The cons is that we have no access to the underlying processes.

3. Use Fare's process parsing implementation in inferior-shell

   --- NOT admitted.

Now, I am planning to put a few addition to his SEXP mini-language.

** SEXP mini-language

A process is a pipe or a command
: process := pipe | or | and | progn | fork | command

A pipe is a list of processes, each of whose output is connected to the next one's input.
: pipe := ( pipe process* )

OR is a list of processes which will be executed in sequence until one returns exit code 0.
: or := ( or processes )

AND is a list of processes which will be executed in sequence until one does not return exit code 0.
: and := ( and processes )

PROGN is a list of processes which will be executed sequentially.
: progn := ( progn processes )

FORK is a list of processes which will be forked and executed in parallel.
: fork := ( fork processes )

A command is a list of tokens and redirections. Tokens specify the argv,
redirections specify modifications of the inherited file descriptors.
: command := ( [redirection|token|tokens]* )

A token is a string, to be used literally,
a keyword, to be downcased and prefixed with -- as in :foo ==> "--foo"
a symbol, to be downcased, or a list of tokens to be concatenated.
: token := string | keyword | symbol | (token*)

A list starting with * is actually to be spliced in the token stream.
: tokens := (\* [token|tokens]*)

Redirections mimic those redirections available to a shell, for instance zsh.
: redirection := (
: ! fd pathname flags |   
open a file with given flags redirect to specified fd
: < fd? pathname | 
open a file for input, redirect to specified fd (default: 0)
: [>|>>|<>|>!|>>!] fd? pathname | 
open a file for (respectively) output, append, io, output clobbering, append clobbering, redirect to specified fd (default: 1)
: - fd | <& fd - | >& fd - | 
close a fd
: <& - | >& - | 
close fd 0, respectively fd 1.
: <& fd fd | >& fd fd | 
redirect fds: the left one is the new number, the right one the old number.
: >& pn | >&! | 
redirect both fd 1 and 2 to pathname (respectively, clobbering)
: >>& pn | >>&! ) 
redirect both fd 1 and 2 to append to pathname (respectively, clobbering)

