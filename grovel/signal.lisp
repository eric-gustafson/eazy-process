;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.11
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcstruct __sigset_t
	(__val :pointer))

(cffi:defcfun ("__sigismember" __sigismember) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("__sigaddset" __sigaddset) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("__sigdelset" __sigdelset) :int
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcstruct __fsid_t
	(__val :pointer))

(cffi:defcstruct timespec
	(tv_sec :long)
	(tv_nsec :long))

(cffi:defcunion sigval_t
	(sival_int :int)
	(sival_ptr :pointer))

(cffi:defcstruct siginfo_t
	(si_signo :int)
	(si_errno :int)
	(si_code :int)
	(_sifields :pointer))

(cffi:defcunion siginfo_t__sifields
	(_pad :pointer)
	(_kill :pointer)
	(_timer :pointer)
	(_rt :pointer)
	(_sigchld :pointer)
	(_sigfault :pointer)
	(_sigpoll :pointer)
	(_sigsys :pointer))

(cffi:defcstruct siginfo_t__sifields__sigsys
	(_call_addr :pointer)
	(_syscall :int)
	(_arch :unsigned-int))

(cffi:defcstruct siginfo_t__sifields__sigpoll
	(si_band :long)
	(si_fd :int))

(cffi:defcstruct siginfo_t__sifields__sigfault
	(si_addr :pointer)
	(si_addr_lsb :short))

(cffi:defcstruct siginfo_t__sifields__sigchld
	(si_pid :int)
	(si_uid :unsigned-int)
	(si_status :int)
	(si_utime :long)
	(si_stime :long))

(cffi:defcstruct siginfo_t__sifields__rt
	(si_pid :int)
	(si_uid :unsigned-int)
	(si_sigval sigval_t))

(cffi:defcstruct siginfo_t__sifields__timer
	(si_tid :int)
	(si_overrun :int)
	(si_sigval sigval_t))

(cffi:defcstruct siginfo_t__sifields__kill
	(si_pid :int)
	(si_uid :unsigned-int))

(defanonenum 
	(SI_ASYNCNL #.-60)
	(SI_TKILL #.-6)
	SI_SIGIO
	SI_ASYNCIO
	SI_MESGQ
	SI_TIMER
	SI_QUEUE
	SI_USER
	(SI_KERNEL #.#x80))

(defanonenum 
	(ILL_ILLOPC #.1)
	ILL_ILLOPN
	ILL_ILLADR
	ILL_ILLTRP
	ILL_PRVOPC
	ILL_PRVREG
	ILL_COPROC
	ILL_BADSTK)

(defanonenum 
	(FPE_INTDIV #.1)
	FPE_INTOVF
	FPE_FLTDIV
	FPE_FLTOVF
	FPE_FLTUND
	FPE_FLTRES
	FPE_FLTINV
	FPE_FLTSUB)

(defanonenum 
	(SEGV_MAPERR #.1)
	SEGV_ACCERR)

(defanonenum 
	(BUS_ADRALN #.1)
	BUS_ADRERR
	BUS_OBJERR
	BUS_MCEERR_AR
	BUS_MCEERR_AO)

(defanonenum 
	(TRAP_BRKPT #.1)
	TRAP_TRACE)

(defanonenum 
	(CLD_EXITED #.1)
	CLD_KILLED
	CLD_DUMPED
	CLD_TRAPPED
	CLD_STOPPED
	CLD_CONTINUED)

(defanonenum 
	(POLL_IN #.1)
	POLL_OUT
	POLL_MSG
	POLL_ERR
	POLL_PRI
	POLL_HUP)

(cffi:defcstruct sigevent_t
	(sigev_value sigval_t)
	(sigev_signo :int)
	(sigev_notify :int)
	(_sigev_un :pointer))

(cffi:defcunion sigevent_t__sigev_un
	(_pad :pointer)
	(_tid :int)
	(_sigev_thread :pointer))

(cffi:defcstruct sigevent_t__sigev_un__sigev_thread
	(_function :pointer)
	(_attribute :pointer))

(defanonenum 
	(SIGEV_SIGNAL #.0)
	SIGEV_NONE
	SIGEV_THREAD
	(SIGEV_THREAD_ID #.4))

(cffi:defcfun ("__sysv_signal" __sysv_signal) :pointer
  (__sig :int)
  (__handler :pointer))

(cffi:defcfun ("signal" signal) :pointer
  (__sig :int)
  (__handler :pointer))

(cffi:defcfun ("kill" kill) :int
  (__pid :int)
  (__sig :int))

(cffi:defcfun ("killpg" killpg) :int
  (__pgrp :int)
  (__sig :int))

(cffi:defcfun ("raise" raise) :int
  (__sig :int))

(cffi:defcfun ("ssignal" ssignal) :pointer
  (__sig :int)
  (__handler :pointer))

(cffi:defcfun ("gsignal" gsignal) :int
  (__sig :int))

(cffi:defcfun ("psignal" psignal) :void
  (__sig :int)
  (__s :string))

(cffi:defcfun ("psiginfo" psiginfo) :void
  (__pinfo :pointer)
  (__s :string))

(cffi:defcfun ("__sigpause" __sigpause) :int
  (__sig_or_mask :int)
  (__is_sig :int))

(cffi:defcfun ("sigblock" sigblock) :int
  (__mask :int))

(cffi:defcfun ("sigsetmask" sigsetmask) :int
  (__mask :int))

(cffi:defcfun ("siggetmask" siggetmask) :int)

(cffi:defcfun ("sigemptyset" sigemptyset) :int
  (__set :pointer))

(cffi:defcfun ("sigfillset" sigfillset) :int
  (__set :pointer))

(cffi:defcfun ("sigaddset" sigaddset) :int
  (__set :pointer)
  (__signo :int))

(cffi:defcfun ("sigdelset" sigdelset) :int
  (__set :pointer)
  (__signo :int))

(cffi:defcfun ("sigismember" sigismember) :int
  (__set :pointer)
  (__signo :int))

(cffi:defcstruct sigaction
	(sa_mask __sigset_t)
	(sa_flags :int)
	(sa_restorer :pointer)
	(__sigaction_handler :pointer))

(cffi:defcunion sigaction___sigaction_handler
	(sa_handler :pointer)
	(sa_sigaction :pointer))

(cffi:defcfun ("sigprocmask" sigprocmask) :int
  (__how :int)
  (__set :pointer)
  (__oset :pointer))

(cffi:defcfun ("sigsuspend" sigsuspend) :int
  (__set :pointer))

(cffi:defcfun ("sigpending" sigpending) :int
  (__set :pointer))

(cffi:defcfun ("sigwait" sigwait) :int
  (__set :pointer)
  (__sig :pointer))

(cffi:defcfun ("sigwaitinfo" sigwaitinfo) :int
  (__set :pointer)
  (__info :pointer))

(cffi:defcfun ("sigtimedwait" sigtimedwait) :int
  (__set :pointer)
  (__info :pointer)
  (__timeout :pointer))

(cffi:defcfun ("sigqueue" sigqueue) :int
  (__pid :int)
  (__sig :int)
  (__val :pointer))

(cffi:defcvar ("_sys_siglist" _sys_siglist)
 :pointer)

(cffi:defcvar ("sys_siglist" sys_siglist)
 :pointer)

(cffi:defcstruct sigvec
	(sv_handler :pointer)
	(sv_mask :int)
	(sv_flags :int))

(cffi:defcstruct _fpx_sw_bytes
	(magic1 :unsigned-int)
	(extended_size :unsigned-int)
	(xstate_bv :unsigned-long)
	(xstate_size :unsigned-int)
	(padding :pointer))

(cffi:defcstruct _fpreg
	(significand :pointer)
	(exponent :unsigned-short))

(cffi:defcstruct _fpxreg
	(significand :pointer)
	(exponent :unsigned-short)
	(padding :pointer))

(cffi:defcstruct _xmmreg
	(element :pointer))

(cffi:defcstruct _fpstate
	(cwd :unsigned-short)
	(swd :unsigned-short)
	(ftw :unsigned-short)
	(fop :unsigned-short)
	(rip :unsigned-long)
	(rdp :unsigned-long)
	(mxcsr :unsigned-int)
	(mxcr_mask :unsigned-int)
	(_st :pointer)
	(_xmm :pointer)
	(padding :pointer))

(cffi:defcstruct sigcontext
	(r8 :unsigned-long)
	(r9 :unsigned-long)
	(r10 :unsigned-long)
	(r11 :unsigned-long)
	(r12 :unsigned-long)
	(r13 :unsigned-long)
	(r14 :unsigned-long)
	(r15 :unsigned-long)
	(rdi :unsigned-long)
	(rsi :unsigned-long)
	(rbp :unsigned-long)
	(rbx :unsigned-long)
	(rdx :unsigned-long)
	(rax :unsigned-long)
	(rcx :unsigned-long)
	(rsp :unsigned-long)
	(rip :unsigned-long)
	(eflags :unsigned-long)
	(cs :unsigned-short)
	(gs :unsigned-short)
	(fs :unsigned-short)
	(__pad0 :unsigned-short)
	(err :unsigned-long)
	(trapno :unsigned-long)
	(oldmask :unsigned-long)
	(cr2 :unsigned-long)
	(__reserved1 :pointer))

(cffi:defcstruct _xsave_hdr
	(xstate_bv :unsigned-long)
	(reserved1 :pointer)
	(reserved2 :pointer))

(cffi:defcstruct _ymmh_state
	(ymmh_space :pointer))

(cffi:defcstruct _xstate
	(fpstate _fpstate)
	(xstate_hdr _xsave_hdr)
	(ymmh _ymmh_state))

(cffi:defcfun ("sigreturn" sigreturn) :int
  (__scp :pointer))

(cffi:defcfun ("siginterrupt" siginterrupt) :int
  (__sig :int)
  (__interrupt :int))

(cffi:defcstruct sigstack
	(ss_sp :pointer)
	(ss_onstack :int))

(defanonenum 
	(SS_ONSTACK #.1)
	SS_DISABLE)

(cffi:defcstruct stack_t
	(ss_sp :pointer)
	(ss_flags :int)
	(ss_size :unsigned-long))

(cffi:defcstruct _libc_fpxreg
	(significand :pointer)
	(exponent :unsigned-short)
	(padding :pointer))

(cffi:defcstruct _libc_xmmreg
	(element :pointer))

(cffi:defcstruct _libc_fpstate
	(cwd :unsigned-short)
	(swd :unsigned-short)
	(ftw :unsigned-short)
	(fop :unsigned-short)
	(rip :unsigned-long)
	(rdp :unsigned-long)
	(mxcsr :unsigned-int)
	(mxcr_mask :unsigned-int)
	(_st :pointer)
	(_xmm :pointer)
	(padding :pointer))

(cffi:defcstruct mcontext_t
	(gregs :pointer)
	(fpregs :pointer)
	(__reserved1 :pointer))

(cffi:defcstruct ucontext_t
	(uc_flags :unsigned-long)
	(uc_link :pointer)
	(uc_stack stack_t)
	(uc_mcontext mcontext_t)
	(uc_sigmask __sigset_t)
	(__fpregs_mem _libc_fpstate))

(cffi:defcfun ("sigaltstack" sigaltstack) :int
  (__ss :pointer)
  (__oss :pointer))

(cffi:defcunion pthread_attr_t
	(__size :pointer)
	(__align :long))

(cffi:defcstruct __pthread_list_t
	(__prev :pointer)
	(__next :pointer))

(cffi:defcunion pthread_mutex_t
	(__size :pointer)
	(__align :long)
	(__data :pointer))

(cffi:defcstruct pthread_mutex_t___data
	(__lock :int)
	(__count :unsigned-int)
	(__owner :int)
	(__nusers :unsigned-int)
	(__kind :int)
	(__spins :short)
	(__elision :short)
	(__list __pthread_list_t))

(cffi:defcunion pthread_mutexattr_t
	(__size :pointer)
	(__align :int))

(cffi:defcunion pthread_cond_t
	(__size :pointer)
	(__align :long-long)
	(__data :pointer))

(cffi:defcstruct pthread_cond_t___data
	(__lock :int)
	(__futex :unsigned-int)
	(__total_seq :unsigned-long-long)
	(__wakeup_seq :unsigned-long-long)
	(__woken_seq :unsigned-long-long)
	(__mutex :pointer)
	(__nwaiters :unsigned-int)
	(__broadcast_seq :unsigned-int))

(cffi:defcunion pthread_condattr_t
	(__size :pointer)
	(__align :int))

(cffi:defcunion pthread_rwlock_t
	(__size :pointer)
	(__align :long)
	(__data :pointer))

(cffi:defcstruct pthread_rwlock_t___data
	(__lock :int)
	(__nr_readers :unsigned-int)
	(__readers_wakeup :unsigned-int)
	(__writer_wakeup :unsigned-int)
	(__nr_readers_queued :unsigned-int)
	(__nr_writers_queued :unsigned-int)
	(__writer :int)
	(__shared :int)
	(__pad1 :unsigned-long)
	(__pad2 :unsigned-long)
	(__flags :unsigned-int))

(cffi:defcunion pthread_rwlockattr_t
	(__size :pointer)
	(__align :long))

(cffi:defcunion pthread_barrier_t
	(__size :pointer)
	(__align :long))

(cffi:defcunion pthread_barrierattr_t
	(__size :pointer)
	(__align :int))

(cffi:defcfun ("pthread_sigmask" pthread_sigmask) :int
  (__how :int)
  (__newmask :pointer)
  (__oldmask :pointer))

(cffi:defcfun ("pthread_kill" pthread_kill) :int
  (__threadid :unsigned-long)
  (__signo :int))

(cffi:defcfun ("__libc_current_sigrtmin" __libc_current_sigrtmin) :int)

(cffi:defcfun ("__libc_current_sigrtmax" __libc_current_sigrtmax) :int)


