;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.11
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(defanonenum 
	(#.(swig-lispify "ECGROUPNOTCOMPILED" 'enumvalue) #.50000)
	#.(swig-lispify "ECGROUPNOTMOUNTED" 'enumvalue)
	#.(swig-lispify "ECGROUPNOTEXIST" 'enumvalue)
	#.(swig-lispify "ECGROUPNOTCREATED" 'enumvalue)
	#.(swig-lispify "ECGROUPSUBSYSNOTMOUNTED" 'enumvalue)
	#.(swig-lispify "ECGROUPNOTOWNER" 'enumvalue)
	#.(swig-lispify "ECGROUPMULTIMOUNTED" 'enumvalue)
	#.(swig-lispify "ECGROUPNOTALLOWED" 'enumvalue)
	#.(swig-lispify "ECGMAXVALUESEXCEEDED" 'enumvalue)
	#.(swig-lispify "ECGCONTROLLEREXISTS" 'enumvalue)
	#.(swig-lispify "ECGVALUEEXISTS" 'enumvalue)
	#.(swig-lispify "ECGINVAL" 'enumvalue)
	#.(swig-lispify "ECGCONTROLLERCREATEFAILED" 'enumvalue)
	#.(swig-lispify "ECGFAIL" 'enumvalue)
	#.(swig-lispify "ECGROUPNOTINITIALIZED" 'enumvalue)
	#.(swig-lispify "ECGROUPVALUENOTEXIST" 'enumvalue)
	#.(swig-lispify "ECGOTHER" 'enumvalue)
	#.(swig-lispify "ECGROUPNOTEQUAL" 'enumvalue)
	#.(swig-lispify "ECGCONTROLLERNOTEQUAL" 'enumvalue)
	#.(swig-lispify "ECGROUPPARSEFAIL" 'enumvalue)
	#.(swig-lispify "ECGROUPNORULES" 'enumvalue)
	#.(swig-lispify "ECGMOUNTFAIL" 'enumvalue)
	#.(swig-lispify "ECGSENTINEL" 'enumvalue)
	#.(swig-lispify "ECGEOF" 'enumvalue)
	#.(swig-lispify "ECGCONFIGPARSEFAIL" 'enumvalue)
	#.(swig-lispify "ECGNAMESPACEPATHS" 'enumvalue)
	#.(swig-lispify "ECGNAMESPACECONTROLLER" 'enumvalue)
	#.(swig-lispify "ECGMOUNTNAMESPACE" 'enumvalue)
	#.(swig-lispify "ECGROUPUNSUPP" 'enumvalue)
	#.(swig-lispify "ECGCANTSETVALUE" 'enumvalue)
	#.(swig-lispify "ECGNONEMPTY" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPNOTCOMPILED" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPNOTMOUNTED" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPNOTEXIST" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPNOTCREATED" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPSUBSYSNOTMOUNTED" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPNOTOWNER" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPMULTIMOUNTED" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPNOTALLOWED" 'enumvalue))

(cl:export '#.(swig-lispify "ECGMAXVALUESEXCEEDED" 'enumvalue))

(cl:export '#.(swig-lispify "ECGCONTROLLEREXISTS" 'enumvalue))

(cl:export '#.(swig-lispify "ECGVALUEEXISTS" 'enumvalue))

(cl:export '#.(swig-lispify "ECGINVAL" 'enumvalue))

(cl:export '#.(swig-lispify "ECGCONTROLLERCREATEFAILED" 'enumvalue))

(cl:export '#.(swig-lispify "ECGFAIL" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPNOTINITIALIZED" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPVALUENOTEXIST" 'enumvalue))

(cl:export '#.(swig-lispify "ECGOTHER" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPNOTEQUAL" 'enumvalue))

(cl:export '#.(swig-lispify "ECGCONTROLLERNOTEQUAL" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPPARSEFAIL" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPNORULES" 'enumvalue))

(cl:export '#.(swig-lispify "ECGMOUNTFAIL" 'enumvalue))

(cl:export '#.(swig-lispify "ECGSENTINEL" 'enumvalue))

(cl:export '#.(swig-lispify "ECGEOF" 'enumvalue))

(cl:export '#.(swig-lispify "ECGCONFIGPARSEFAIL" 'enumvalue))

(cl:export '#.(swig-lispify "ECGNAMESPACEPATHS" 'enumvalue))

(cl:export '#.(swig-lispify "ECGNAMESPACECONTROLLER" 'enumvalue))

(cl:export '#.(swig-lispify "ECGMOUNTNAMESPACE" 'enumvalue))

(cl:export '#.(swig-lispify "ECGROUPUNSUPP" 'enumvalue))

(cl:export '#.(swig-lispify "ECGCANTSETVALUE" 'enumvalue))

(cl:export '#.(swig-lispify "ECGNONEMPTY" 'enumvalue))

(cffi:defcfun ("cgroup_strerror" #.(swig-lispify "cgroup_strerror" 'function)) :string
  (code :int))

(cl:export '#.(swig-lispify "cgroup_strerror" 'function))

(cffi:defcfun ("cgroup_get_last_errno" #.(swig-lispify "cgroup_get_last_errno" 'function)) :int)

(cl:export '#.(swig-lispify "cgroup_get_last_errno" 'function))

(cffi:defcfun ("cgroup_init" #.(swig-lispify "cgroup_init" 'function)) :int)

(cl:export '#.(swig-lispify "cgroup_init" 'function))

(cffi:defcfun ("cgroup_get_subsys_mount_point" #.(swig-lispify "cgroup_get_subsys_mount_point" 'function)) :int
  (controller :string)
  (mount_point :pointer))

(cl:export '#.(swig-lispify "cgroup_get_subsys_mount_point" 'function))

(cffi:defcenum #.(swig-lispify "cgroup_walk_type" 'enumname)
	(#.(swig-lispify "CGROUP_WALK_TYPE_PRE_DIR" 'enumvalue :keyword) #.#x1)
	(#.(swig-lispify "CGROUP_WALK_TYPE_POST_DIR" 'enumvalue :keyword) #.#x2))

(cl:export '#.(swig-lispify "cgroup_walk_type" 'enumname))

(cffi:defcenum #.(swig-lispify "cgroup_file_type" 'enumname)
	#.(swig-lispify "CGROUP_FILE_TYPE_FILE" 'enumvalue :keyword)
	#.(swig-lispify "CGROUP_FILE_TYPE_DIR" 'enumvalue :keyword)
	#.(swig-lispify "CGROUP_FILE_TYPE_OTHER" 'enumvalue :keyword))

(cl:export '#.(swig-lispify "cgroup_file_type" 'enumname))

(cffi:defcstruct #.(swig-lispify "cgroup_file_info" 'classname)
	(#.(swig-lispify "type" 'slotname) #.(swig-lispify "cgroup_file_type" 'enumname))
	(#.(swig-lispify "path" 'slotname) :string)
	(#.(swig-lispify "parent" 'slotname) :string)
	(#.(swig-lispify "full_path" 'slotname) :string)
	(#.(swig-lispify "depth" 'slotname) :short))

(cl:export '#.(swig-lispify "cgroup_file_info" 'classname))

(cl:export '#.(swig-lispify "type" 'slotname))

(cl:export '#.(swig-lispify "path" 'slotname))

(cl:export '#.(swig-lispify "parent" 'slotname))

(cl:export '#.(swig-lispify "full_path" 'slotname))

(cl:export '#.(swig-lispify "depth" 'slotname))

(cffi:defcfun ("cgroup_walk_tree_begin" #.(swig-lispify "cgroup_walk_tree_begin" 'function)) :int
  (controller :string)
  (base_path :string)
  (depth :int)
  (handle :pointer)
  (info :pointer)
  (base_level :pointer))

(cl:export '#.(swig-lispify "cgroup_walk_tree_begin" 'function))

(cffi:defcfun ("cgroup_walk_tree_next" #.(swig-lispify "cgroup_walk_tree_next" 'function)) :int
  (depth :int)
  (handle :pointer)
  (info :pointer)
  (base_level :int))

(cl:export '#.(swig-lispify "cgroup_walk_tree_next" 'function))

(cffi:defcfun ("cgroup_walk_tree_end" #.(swig-lispify "cgroup_walk_tree_end" 'function)) :int
  (handle :pointer))

(cl:export '#.(swig-lispify "cgroup_walk_tree_end" 'function))

(cffi:defcfun ("cgroup_walk_tree_set_flags" #.(swig-lispify "cgroup_walk_tree_set_flags" 'function)) :int
  (handle :pointer)
  (flags :int))

(cl:export '#.(swig-lispify "cgroup_walk_tree_set_flags" 'function))

(cffi:defcfun ("cgroup_read_value_begin" #.(swig-lispify "cgroup_read_value_begin" 'function)) :int
  (controller :string)
  (path :string)
  (name :string)
  (handle :pointer)
  (buffer :string)
  (max :int))

(cl:export '#.(swig-lispify "cgroup_read_value_begin" 'function))

(cffi:defcfun ("cgroup_read_value_next" #.(swig-lispify "cgroup_read_value_next" 'function)) :int
  (handle :pointer)
  (buffer :string)
  (max :int))

(cl:export '#.(swig-lispify "cgroup_read_value_next" 'function))

(cffi:defcfun ("cgroup_read_value_end" #.(swig-lispify "cgroup_read_value_end" 'function)) :int
  (handle :pointer))

(cl:export '#.(swig-lispify "cgroup_read_value_end" 'function))

(cl:defconstant #.(swig-lispify "CG_VALUE_MAX" 'constant) 100)

(cl:export '#.(swig-lispify "CG_VALUE_MAX" 'constant))

(cffi:defcstruct #.(swig-lispify "cgroup_stat" 'classname)
	(#.(swig-lispify "name" 'slotname) :pointer)
	(#.(swig-lispify "value" 'slotname) :pointer))

(cl:export '#.(swig-lispify "cgroup_stat" 'classname))

(cl:export '#.(swig-lispify "name" 'slotname))

(cl:export '#.(swig-lispify "value" 'slotname))

(cffi:defcfun ("cgroup_read_stats_begin" #.(swig-lispify "cgroup_read_stats_begin" 'function)) :int
  (controller :string)
  (path :string)
  (handle :pointer)
  (stat :pointer))

(cl:export '#.(swig-lispify "cgroup_read_stats_begin" 'function))

(cffi:defcfun ("cgroup_read_stats_next" #.(swig-lispify "cgroup_read_stats_next" 'function)) :int
  (handle :pointer)
  (stat :pointer))

(cl:export '#.(swig-lispify "cgroup_read_stats_next" 'function))

(cffi:defcfun ("cgroup_read_stats_end" #.(swig-lispify "cgroup_read_stats_end" 'function)) :int
  (handle :pointer))

(cl:export '#.(swig-lispify "cgroup_read_stats_end" 'function))

(cffi:defcfun ("cgroup_get_task_begin" #.(swig-lispify "cgroup_get_task_begin" 'function)) :int
  (cgroup :string)
  (controller :string)
  (handle :pointer)
  (pid :pointer))

(cl:export '#.(swig-lispify "cgroup_get_task_begin" 'function))

(cffi:defcfun ("cgroup_get_task_next" #.(swig-lispify "cgroup_get_task_next" 'function)) :int
  (handle :pointer)
  (pid :pointer))

(cl:export '#.(swig-lispify "cgroup_get_task_next" 'function))

(cffi:defcfun ("cgroup_get_task_end" #.(swig-lispify "cgroup_get_task_end" 'function)) :int
  (handle :pointer))

(cl:export '#.(swig-lispify "cgroup_get_task_end" 'function))

(cffi:defcstruct #.(swig-lispify "cgroup_mount_point" 'classname)
	(#.(swig-lispify "name" 'slotname) :pointer)
	(#.(swig-lispify "path" 'slotname) :pointer))

(cl:export '#.(swig-lispify "cgroup_mount_point" 'classname))

(cl:export '#.(swig-lispify "name" 'slotname))

(cl:export '#.(swig-lispify "path" 'slotname))

(cffi:defcfun ("cgroup_get_controller_begin" #.(swig-lispify "cgroup_get_controller_begin" 'function)) :int
  (handle :pointer)
  (info :pointer))

(cl:export '#.(swig-lispify "cgroup_get_controller_begin" 'function))

(cffi:defcfun ("cgroup_get_controller_next" #.(swig-lispify "cgroup_get_controller_next" 'function)) :int
  (handle :pointer)
  (info :pointer))

(cl:export '#.(swig-lispify "cgroup_get_controller_next" 'function))

(cffi:defcfun ("cgroup_get_controller_end" #.(swig-lispify "cgroup_get_controller_end" 'function)) :int
  (handle :pointer))

(cl:export '#.(swig-lispify "cgroup_get_controller_end" 'function))

(cffi:defcstruct #.(swig-lispify "controller_data" 'classname)
	(#.(swig-lispify "name" 'slotname) :pointer)
	(#.(swig-lispify "hierarchy" 'slotname) :int)
	(#.(swig-lispify "num_cgroups" 'slotname) :int)
	(#.(swig-lispify "enabled" 'slotname) :int))

(cl:export '#.(swig-lispify "controller_data" 'classname))

(cl:export '#.(swig-lispify "name" 'slotname))

(cl:export '#.(swig-lispify "hierarchy" 'slotname))

(cl:export '#.(swig-lispify "num_cgroups" 'slotname))

(cl:export '#.(swig-lispify "enabled" 'slotname))

(cffi:defcfun ("cgroup_get_all_controller_begin" #.(swig-lispify "cgroup_get_all_controller_begin" 'function)) :int
  (handle :pointer)
  (info :pointer))

(cl:export '#.(swig-lispify "cgroup_get_all_controller_begin" 'function))

(cffi:defcfun ("cgroup_get_all_controller_next" #.(swig-lispify "cgroup_get_all_controller_next" 'function)) :int
  (handle :pointer)
  (info :pointer))

(cl:export '#.(swig-lispify "cgroup_get_all_controller_next" 'function))

(cffi:defcfun ("cgroup_get_all_controller_end" #.(swig-lispify "cgroup_get_all_controller_end" 'function)) :int
  (handle :pointer))

(cl:export '#.(swig-lispify "cgroup_get_all_controller_end" 'function))

(cffi:defcfun ("cgroup_get_subsys_mount_point_begin" #.(swig-lispify "cgroup_get_subsys_mount_point_begin" 'function)) :int
  (controller :string)
  (handle :pointer)
  (path :string))

(cl:export '#.(swig-lispify "cgroup_get_subsys_mount_point_begin" 'function))

(cffi:defcfun ("cgroup_get_subsys_mount_point_next" #.(swig-lispify "cgroup_get_subsys_mount_point_next" 'function)) :int
  (handle :pointer)
  (path :string))

(cl:export '#.(swig-lispify "cgroup_get_subsys_mount_point_next" 'function))

(cffi:defcfun ("cgroup_get_subsys_mount_point_end" #.(swig-lispify "cgroup_get_subsys_mount_point_end" 'function)) :int
  (handle :pointer))

(cl:export '#.(swig-lispify "cgroup_get_subsys_mount_point_end" 'function))

(cffi:defcenum #.(swig-lispify "cgroup_delete_flag" 'enumname)
	(#.(swig-lispify "CGFLAG_DELETE_IGNORE_MIGRATION" 'enumvalue :keyword) #.1)
	(#.(swig-lispify "CGFLAG_DELETE_RECURSIVE" 'enumvalue :keyword) #.2)
	(#.(swig-lispify "CGFLAG_DELETE_EMPTY_ONLY" 'enumvalue :keyword) #.4))

(cl:export '#.(swig-lispify "cgroup_delete_flag" 'enumname))

(cl:defconstant #.(swig-lispify "NO_PERMS" 'constant) -1)

(cl:export '#.(swig-lispify "NO_PERMS" 'constant))

(cl:defconstant #.(swig-lispify "NO_UID_GID" 'constant) -1)

(cl:export '#.(swig-lispify "NO_UID_GID" 'constant))

(cffi:defcfun ("cgroup_new_cgroup" #.(swig-lispify "cgroup_new_cgroup" 'function)) :pointer
  (name :string))

(cl:export '#.(swig-lispify "cgroup_new_cgroup" 'function))

(cffi:defcfun ("cgroup_add_controller" #.(swig-lispify "cgroup_add_controller" 'function)) :pointer
  (cgroup :pointer)
  (name :string))

(cl:export '#.(swig-lispify "cgroup_add_controller" 'function))

(cffi:defcfun ("cgroup_get_controller" #.(swig-lispify "cgroup_get_controller" 'function)) :pointer
  (cgroup :pointer)
  (name :string))

(cl:export '#.(swig-lispify "cgroup_get_controller" 'function))

(cffi:defcfun ("cgroup_free" #.(swig-lispify "cgroup_free" 'function)) :void
  (cgroup :pointer))

(cl:export '#.(swig-lispify "cgroup_free" 'function))

(cffi:defcfun ("cgroup_free_controllers" #.(swig-lispify "cgroup_free_controllers" 'function)) :void
  (cgroup :pointer))

(cl:export '#.(swig-lispify "cgroup_free_controllers" 'function))

(cffi:defcfun ("cgroup_create_cgroup" #.(swig-lispify "cgroup_create_cgroup" 'function)) :int
  (cgroup :pointer)
  (ignore_ownership :int))

(cl:export '#.(swig-lispify "cgroup_create_cgroup" 'function))

(cffi:defcfun ("cgroup_create_cgroup_from_parent" #.(swig-lispify "cgroup_create_cgroup_from_parent" 'function)) :int
  (cgroup :pointer)
  (ignore_ownership :int))

(cl:export '#.(swig-lispify "cgroup_create_cgroup_from_parent" 'function))

(cffi:defcfun ("cgroup_modify_cgroup" #.(swig-lispify "cgroup_modify_cgroup" 'function)) :int
  (cgroup :pointer))

(cl:export '#.(swig-lispify "cgroup_modify_cgroup" 'function))

(cffi:defcfun ("cgroup_delete_cgroup" #.(swig-lispify "cgroup_delete_cgroup" 'function)) :int
  (cgroup :pointer)
  (ignore_migration :int))

(cl:export '#.(swig-lispify "cgroup_delete_cgroup" 'function))

(cffi:defcfun ("cgroup_delete_cgroup_ext" #.(swig-lispify "cgroup_delete_cgroup_ext" 'function)) :int
  (cgroup :pointer)
  (flags :int))

(cl:export '#.(swig-lispify "cgroup_delete_cgroup_ext" 'function))

(cffi:defcfun ("cgroup_get_cgroup" #.(swig-lispify "cgroup_get_cgroup" 'function)) :int
  (cgroup :pointer))

(cl:export '#.(swig-lispify "cgroup_get_cgroup" 'function))

(cffi:defcfun ("cgroup_copy_cgroup" #.(swig-lispify "cgroup_copy_cgroup" 'function)) :int
  (dst :pointer)
  (src :pointer))

(cl:export '#.(swig-lispify "cgroup_copy_cgroup" 'function))

(cffi:defcfun ("cgroup_compare_cgroup" #.(swig-lispify "cgroup_compare_cgroup" 'function)) :int
  (cgroup_a :pointer)
  (cgroup_b :pointer))

(cl:export '#.(swig-lispify "cgroup_compare_cgroup" 'function))

(cffi:defcfun ("cgroup_compare_controllers" #.(swig-lispify "cgroup_compare_controllers" 'function)) :int
  (cgca :pointer)
  (cgcb :pointer))

(cl:export '#.(swig-lispify "cgroup_compare_controllers" 'function))

(cffi:defcfun ("cgroup_set_uid_gid" #.(swig-lispify "cgroup_set_uid_gid" 'function)) :int
  (cgroup :pointer)
  (tasks_uid :pointer)
  (tasks_gid :pointer)
  (control_uid :pointer)
  (control_gid :pointer))

(cl:export '#.(swig-lispify "cgroup_set_uid_gid" 'function))

(cffi:defcfun ("cgroup_get_uid_gid" #.(swig-lispify "cgroup_get_uid_gid" 'function)) :int
  (cgroup :pointer)
  (tasks_uid :pointer)
  (tasks_gid :pointer)
  (control_uid :pointer)
  (control_gid :pointer))

(cl:export '#.(swig-lispify "cgroup_get_uid_gid" 'function))

(cffi:defcfun ("cgroup_set_permissions" #.(swig-lispify "cgroup_set_permissions" 'function)) :void
  (cgroup :pointer)
  (control_dperm :pointer)
  (control_fperm :pointer)
  (task_fperm :pointer))

(cl:export '#.(swig-lispify "cgroup_set_permissions" 'function))

(cffi:defcfun ("cgroup_add_value_string" #.(swig-lispify "cgroup_add_value_string" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :string))

(cl:export '#.(swig-lispify "cgroup_add_value_string" 'function))

(cffi:defcfun ("cgroup_add_value_int64" #.(swig-lispify "cgroup_add_value_int64" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_add_value_int64" 'function))

(cffi:defcfun ("cgroup_add_value_uint64" #.(swig-lispify "cgroup_add_value_uint64" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_add_value_uint64" 'function))

(cffi:defcfun ("cgroup_add_value_bool" #.(swig-lispify "cgroup_add_value_bool" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_add_value_bool" 'function))

(cffi:defcfun ("cgroup_get_value_string" #.(swig-lispify "cgroup_get_value_string" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_get_value_string" 'function))

(cffi:defcfun ("cgroup_get_value_int64" #.(swig-lispify "cgroup_get_value_int64" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_get_value_int64" 'function))

(cffi:defcfun ("cgroup_get_value_uint64" #.(swig-lispify "cgroup_get_value_uint64" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_get_value_uint64" 'function))

(cffi:defcfun ("cgroup_get_value_bool" #.(swig-lispify "cgroup_get_value_bool" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_get_value_bool" 'function))

(cffi:defcfun ("cgroup_set_value_string" #.(swig-lispify "cgroup_set_value_string" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :string))

(cl:export '#.(swig-lispify "cgroup_set_value_string" 'function))

(cffi:defcfun ("cgroup_set_value_int64" #.(swig-lispify "cgroup_set_value_int64" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_set_value_int64" 'function))

(cffi:defcfun ("cgroup_set_value_uint64" #.(swig-lispify "cgroup_set_value_uint64" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_set_value_uint64" 'function))

(cffi:defcfun ("cgroup_set_value_bool" #.(swig-lispify "cgroup_set_value_bool" 'function)) :int
  (controller :pointer)
  (name :string)
  (value :pointer))

(cl:export '#.(swig-lispify "cgroup_set_value_bool" 'function))

(cffi:defcfun ("cgroup_get_value_name_count" #.(swig-lispify "cgroup_get_value_name_count" 'function)) :int
  (controller :pointer))

(cl:export '#.(swig-lispify "cgroup_get_value_name_count" 'function))

(cffi:defcfun ("cgroup_get_value_name" #.(swig-lispify "cgroup_get_value_name" 'function)) :string
  (controller :pointer)
  (index :int))

(cl:export '#.(swig-lispify "cgroup_get_value_name" 'function))

(cffi:defcfun ("cgroup_get_procs" #.(swig-lispify "cgroup_get_procs" 'function)) :int
  (name :string)
  (controller :string)
  (pids :pointer)
  (size :pointer))

(cl:export '#.(swig-lispify "cgroup_get_procs" 'function))

(cffi:defcfun ("cg_chmod_recursive" #.(swig-lispify "cg_chmod_recursive" 'function)) :int
  (cgroup :pointer)
  (dir_mode :pointer)
  (dirm_change :int)
  (file_mode :pointer)
  (filem_change :int))

(cl:export '#.(swig-lispify "cg_chmod_recursive" 'function))

(cffi:defcenum #.(swig-lispify "cgflags" 'enumname)
	(#.(swig-lispify "CGFLAG_USECACHE" 'enumvalue :keyword) #.#x01))

(cl:export '#.(swig-lispify "cgflags" 'enumname))

(cffi:defcenum #.(swig-lispify "cgroup_daemon_type" 'enumname)
	(#.(swig-lispify "CGROUP_DAEMON_UNCHANGE_CHILDREN" 'enumvalue :keyword) #.#x1)
	(#.(swig-lispify "CGROUP_DAEMON_CANCEL_UNCHANGE_PROCESS" 'enumvalue :keyword) #.#x2))

(cl:export '#.(swig-lispify "cgroup_daemon_type" 'enumname))

(cffi:defcfun ("cgroup_attach_task" #.(swig-lispify "cgroup_attach_task" 'function)) :int
  (cgroup :pointer))

(cl:export '#.(swig-lispify "cgroup_attach_task" 'function))

(cffi:defcfun ("cgroup_attach_task_pid" #.(swig-lispify "cgroup_attach_task_pid" 'function)) :int
  (cgroup :pointer)
  (tid :pointer))

(cl:export '#.(swig-lispify "cgroup_attach_task_pid" 'function))

(cffi:defcfun ("cgroup_change_cgroup_path" #.(swig-lispify "cgroup_change_cgroup_path" 'function)) :int
  (path :string)
  (pid :pointer)
  (controllers :pointer))

(cl:export '#.(swig-lispify "cgroup_change_cgroup_path" 'function))

(cffi:defcfun ("cgroup_get_current_controller_path" #.(swig-lispify "cgroup_get_current_controller_path" 'function)) :int
  (pid :pointer)
  (controller :string)
  (current_path :pointer))

(cl:export '#.(swig-lispify "cgroup_get_current_controller_path" 'function))

(cffi:defcfun ("cgroup_init_rules_cache" #.(swig-lispify "cgroup_init_rules_cache" 'function)) :int)

(cl:export '#.(swig-lispify "cgroup_init_rules_cache" 'function))

(cffi:defcfun ("cgroup_reload_cached_rules" #.(swig-lispify "cgroup_reload_cached_rules" 'function)) :int)

(cl:export '#.(swig-lispify "cgroup_reload_cached_rules" 'function))

(cffi:defcfun ("cgroup_print_rules_config" #.(swig-lispify "cgroup_print_rules_config" 'function)) :void
  (fp :pointer))

(cl:export '#.(swig-lispify "cgroup_print_rules_config" 'function))

(cffi:defcfun ("cgroup_change_cgroup_flags" #.(swig-lispify "cgroup_change_cgroup_flags" 'function)) :int
  (uid :pointer)
  (gid :pointer)
  (procname :string)
  (pid :pointer)
  (flags :int))

(cl:export '#.(swig-lispify "cgroup_change_cgroup_flags" 'function))

(cffi:defcfun ("cgroup_change_cgroup_uid_gid_flags" #.(swig-lispify "cgroup_change_cgroup_uid_gid_flags" 'function)) :int
  (uid :pointer)
  (gid :pointer)
  (pid :pointer)
  (flags :int))

(cl:export '#.(swig-lispify "cgroup_change_cgroup_uid_gid_flags" 'function))

(cffi:defcfun ("cgroup_change_cgroup_uid_gid" #.(swig-lispify "cgroup_change_cgroup_uid_gid" 'function)) :int
  (uid :pointer)
  (gid :pointer)
  (pid :pointer))

(cl:export '#.(swig-lispify "cgroup_change_cgroup_uid_gid" 'function))

(cffi:defcfun ("cgroup_register_unchanged_process" #.(swig-lispify "cgroup_register_unchanged_process" 'function)) :int
  (pid :pointer)
  (flags :int))

(cl:export '#.(swig-lispify "cgroup_register_unchanged_process" 'function))

(cffi:defcfun ("cgroup_config_load_config" #.(swig-lispify "cgroup_config_load_config" 'function)) :int
  (pathname :string))

(cl:export '#.(swig-lispify "cgroup_config_load_config" 'function))

(cffi:defcfun ("cgroup_unload_cgroups" #.(swig-lispify "cgroup_unload_cgroups" 'function)) :int)

(cl:export '#.(swig-lispify "cgroup_unload_cgroups" 'function))

(cffi:defcfun ("cgroup_config_unload_config" #.(swig-lispify "cgroup_config_unload_config" 'function)) :int
  (pathname :string)
  (flags :int))

(cl:export '#.(swig-lispify "cgroup_config_unload_config" 'function))

(cffi:defcfun ("cgroup_config_set_default" #.(swig-lispify "cgroup_config_set_default" 'function)) :int
  (new_default :pointer))

(cl:export '#.(swig-lispify "cgroup_config_set_default" 'function))


